@startuml
package org.renaultleat.consensus {
  class BlockMessage {
    ~ block : Block
    ~ epoch : int
    ~ messageSender : String
    ~ messageSignature : String
    ~ nodeIndex : int
    ~ round : int
    ~ subepoch : int
    ~ type : String
    + BlockMessage(type : String, nodeIndex : int, messagesignature : String, messageSender : String, round : int, epoch : int, subepoch : int, block : Block)
    + getBlock() : Block
    + getEpoch() : int
    + getMessageSender() : String
    + getMessagesignature() : String
    + getNodeIndex() : int
    + getRound() : int
    + getSubEpoch() : int
    + getType() : String
    + setBlock(block : Block)
    + setEpoch(epoch : int)
    + setMessageSender(messageSender : String)
    + setMessagesignature(messageSignature : String)
    + setNodeIndex(nodeIndex : int)
    + setRound(round : int)
    + setSubEpoch(subepoch : int)
    + setType(type : String)
  }
  class CAPSEOBFTDemMessagePool {
    + blockMessagePool : Map<Integer, CopyOnWriteArrayList<String>>
    + commitMessagePool : Map<String, CopyOnWriteArrayList<String>>
    + commitMessagePoolIndexes : Map<String, CopyOnWriteArrayList<Integer>>
    + finaliseMessagePool : Map<Integer, CopyOnWriteArrayList<String>>
    + heartBeatMessagePool : Map<Integer, CopyOnWriteArrayList<String>>
    + privacyRequestMessagePool : Map<String, CopyOnWriteArrayList<String>>
    + privacyResponseMessagePool : Map<String, CopyOnWriteArrayList<String>>
    + proposeMessagePool : Map<String, CopyOnWriteArrayList<String>>
    + quorumMessagePool : Map<Integer, CopyOnWriteArrayList<String>>
    + quorumStorage : QuorumStorage
    + roundChangeMessagePool : Map<Integer, CopyOnWriteArrayList<String>>
    + utilitarianCalculator : UtilitarianCalculator
    + CAPSEOBFTDemMessagePool(utilitarianCalculator : UtilitarianCalculator, quorumStorage : QuorumStorage)
    + addBlockMessage(block : Block) : boolean
    + addCommitMessage(partialBlock : PartialBlock, messenger : String, nodeIndex : int) : boolean
    + addFinaliseMessage(partialBlock : PartialBlock) : boolean
    + addHeartBeatMessage(round : int, messenger : String) : boolean
    + addMessage(message : Message) : boolean
    + addPrivacyMessage(txHash : String, messenger : String, type : String) : boolean
    + addProposeMessage(partialBlock : PartialBlock) : boolean
    + addQuorumMessage(quorumMessage : QuorumMessage) : boolean
    + addRoundChangeMessage(subEpoch : int, messenger : String) : boolean
    + clearAllMessagePool()
    + clearAllMessagePoolForBlockHash(blockhash : String)
    + clearCommitMessagePoolForBlockHash(blockhash : String)
    + clearProposeMessagePoolForBlockHash(blockhash : String)
    + clearRoundChangeMessagePoolForBlockHash(round : Integer)
    + existingBlockMessage(block : Block) : boolean
    + existingCommitMessage(partialBlock : PartialBlock, messenger : String) : boolean
    + existingConsensusMessage(message : Message) : boolean
    + existingFinaliseMessage(partialBlock : PartialBlock) : boolean
    + existingHeartBeatMessage(round : int, messenger : String) : boolean
    + existingPrivacyMessage(txHash : String, messenger : String, type : String) : boolean
    + existingProposeMessage(partialBlock : PartialBlock) : boolean
    + existingQuorumMessage(quorumMessage : QuorumMessage) : boolean
    + existingRoundChangeMessage(blockheight : int, messenger : String) : boolean
    + formBlockMessage(blockChain : Blockchain, block : Block, wallet : Wallet) : BlockMessage
    + formFinaliseMessage(blockChain : Blockchain, wallet : Wallet, inTemporalHashingState : Map<Timestamp, Map<List<Integer>, String>>, partialBlock : PartialBlock) : FinaliseMessage
    + formInitialQuorumMessage(blockChain : Blockchain, wallet : Wallet, blockIndex : int) : QuorumMessage
    + formQuorumMessage(blockChain : Blockchain, wallet : Wallet, utilitarianCalculator : UtilitarianCalculator, type : int, inblockIndex : int) : QuorumMessage
    + getBlockMessagePool() : Map<Integer, CopyOnWriteArrayList<String>>
    + getCommmitMessagePool() : Map<String, CopyOnWriteArrayList<String>>
    + getCommmitMessagePoolIndexes() : Map<String, CopyOnWriteArrayList<Integer>>
    + getFinaliseMessagePool() : Map<Integer, CopyOnWriteArrayList<String>>
    + getHeartBeatMessagePool() : Map<Integer, CopyOnWriteArrayList<String>>
    + getPrivacyRequestMessagePool() : Map<String, CopyOnWriteArrayList<String>>
    + getPrivacyResponseMessagePool() : Map<String, CopyOnWriteArrayList<String>>
    + getProposeMessagePool() : Map<String, CopyOnWriteArrayList<String>>
    + getQuorumMessagePool() : Map<Integer, CopyOnWriteArrayList<String>>
    + getRoundChangeMessagePool() : Map<Integer, CopyOnWriteArrayList<String>>
    + getSizeofCommitMessagePoolForBlockHash(blockhash : String) : int
    + getSizeofPrepareMessagePoolForBlockHash(blockhash : String) : int
    + getSizeofRoundChangeMessagePoolForBlockHash(round : int) : int
    + isValidBlockMessage(blockMessage : BlockMessage) : boolean
    + isValidFinaliseMessage(finaliseMessage : FinaliseMessage) : boolean
    + isValidMessage(message : Message) : boolean
    + isValidQuorumMessage(quorumMessage : QuorumMessage) : boolean
    + isValidRoundChangeQuorumMessage(quorumMessage : QuorumMessage) : boolean
    + message(type : String, block : Block, wallet : Wallet, blockchain : Blockchain) : Message
    + populateGenesisNodeList() : Map<Integer, Integer>
    + populateWalletMapping(sortedMap : Map<Integer, Integer>) : Map<Integer, Integer>
    + setBlockMessagePool(blockMessagePool : Map<Integer, CopyOnWriteArrayList<String>>)
    + setCommmitMessagePool(commmitMessagePool : Map<String, CopyOnWriteArrayList<String>>)
    + setCommmitMessagePoolIndexes(commmitMessagePoolIndexes : Map<String, CopyOnWriteArrayList<Integer>>)
    + setFinaliseMessagePool(finaliseMessagePool : Map<Integer, CopyOnWriteArrayList<String>>)
    + setPrivacyRequestMessagePool(privacyRequestMessagePool : Map<String, CopyOnWriteArrayList<String>>)
    + setPrivacyResponseMessagePool(privacyResponseMessagePool : Map<String, CopyOnWriteArrayList<String>>)
    + setProposeMessagePool(proposeMessagePool : Map<String, CopyOnWriteArrayList<String>>)
    + setRoundChangePool(roundChangeMessagePool : Map<Integer, CopyOnWriteArrayList<String>>)
  }
  class FinaliseMessage {
    ~ epoch : int
    ~ messageSender : String
    ~ messageSignature : String
    ~ nodeIndex : int
    ~ partialBlock : PartialBlock
    ~ round : int
    ~ subepoch : int
    ~ temporalHashingState : Map<Timestamp, Map<List<Integer>, String>>
    ~ type : String
    + FinaliseMessage(type : String, nodeIndex : int, messagesignature : String, messageSender : String, round : int, temporalHashingState : Map<Timestamp, Map<List<Integer>, String>>, epoch : int, subepoch : int, partialBlock : PartialBlock)
    + getEpoch() : int
    + getMessageSender() : String
    + getMessagesignature() : String
    + getNodeIndex() : int
    + getPartialBlock() : PartialBlock
    + getRound() : int
    + getSubEpoch() : int
    + getType() : String
    + setEpoch(epoch : int)
    + setMessageSender(messageSender : String)
    + setMessagesignature(messageSignature : String)
    + setNodeIndex(nodeIndex : int)
    + setPartialBlock(partialBlock : PartialBlock)
    + setRound(round : int)
    + setSubEpoch(subepoch : int)
    + setType(type : String)
  }
  class Message {
    ~ blockHash : String
    ~ contents : String
    ~ epoch : int
    ~ index : int
    ~ messageSender : String
    ~ messagesignature : String
    ~ round : int
    ~ subepoch : int
    ~ type : String
    + Message(type : String, blockHash : String, messagesignature : String, messageSender : String, contents : String, round : int, epoch : int, subepoch : int, index : int)
    + Message(type : String, messagesignature : String, messageSender : String, contents : String, round : int, epoch : int, subepoch : int)
    + getBlockHash() : String
    + getContents() : String
    + getEpoch() : int
    + getMessageSender() : String
    + getMessagesignature() : String
    + getRound() : int
    + getSubEpoch() : int
    + getType() : String
    + setBlockHash(blockHash : String)
    + setContents(contents : String)
    + setEpoch(epoch : int)
    + setMessageSender(messageSender : String)
    + setMessagesignature(messagesignature : String)
    + setRound(round : int)
    + setSubEpoch(subepoch : int)
    + setType(type : String)
  }
  class QuorumMessage {
    ~ altruistList : List<Integer>
    + blackListedMembers : Map<Integer, List<Integer>>
    ~ blockindex : int
    ~ currentSuspendedMembers : Set<Integer>
    + effectiveUtilitarianScore : Map<Integer, Double>
    ~ epoch : int
    ~ fairAltruistList : List<Integer>
    ~ idealAltruistList : List<Integer>
    ~ inActiveMembers : Set<Integer>
    ~ messageComment : String
    ~ messageSender : String
    ~ messageSignature : String
    ~ nodeIndex : int
    ~ originalNodeMap : Map<Integer, QuorumOriginal>
    ~ proposedSubEpoch : int
    ~ quorumIdInverseMapping : Map<Integer, List<Integer>>
    ~ quorumIdMapping : Map<Integer, Integer>
    ~ quorumIdMemberCount : Map<Integer, Integer>
    ~ quorumIndexMapping : Map<Integer, Integer>
    ~ quorumMessageType : int
    ~ sortedFinalMap : Map<Integer, Integer>
    ~ subepoch : int
    + totaleffectivemembers : int
    + totalquorummembers : int
    ~ type : String
    + utilitarianClassification : Map<Integer, Integer>
    ~ walletMapping : Map<Integer, Integer>
    ~ weakAltruistList : List<Integer>
    + QuorumMessage(type : String, epoch : int, subepoch : int, nodeIndex : int, messagesignature : String, messageSender : String, blockIndex : int, quorumIdMapping : Map<Integer, Integer>, quorumIdInverseMapping : Map<Integer, List<Integer>>, quorumIndexMapping : Map<Integer, Integer>, quorumIdMemberCount : Map<Integer, Integer>, totaleffectivemembers : int, totalquorummembers : int, blackListedMembers : Map<Integer, List<Integer>>, utilitarianClassification : Map<Integer, Integer>, effectiveUtilitarianScore : Map<Integer, Double>, idealAltruistList : List<Integer>, altruistList : List<Integer>, fairAltruistList : List<Integer>, weakAltruistList : List<Integer>, sortedFinalMap : Map<Integer, Integer>, proposedSubEpoch : int, quorumMessageType : int, inWalletMapping : Map<Integer, Integer>, messageComment : String, inActiveMembers : Set<Integer>, currentSuspendedMembers : Set<Integer>)
    + getAltruistList() : List<Integer>
    + getBlackListedMembers() : Map<Integer, List<Integer>>
    + getBlockIndex() : int
    + getCurrentSuspendedMembers() : Set<Integer>
    + getEffectiveUtilitarianScore() : Map<Integer, Double>
    + getEpoch() : int
    + getFairAltruistList() : List<Integer>
    + getIdealAltruistList() : List<Integer>
    + getInactiveMembers() : Set<Integer>
    + getMessageComment() : String
    + getMessageSender() : String
    + getMessagesignature() : String
    + getNodeIndex() : int
    + getOriginalNodeMap() : Map<Integer, QuorumOriginal>
    + getProposedSubEpoch() : int
    + getQuorumIdInverseMapping() : Map<Integer, List<Integer>>
    + getQuorumIdMappping() : Map<Integer, Integer>
    + getQuorumIdMemberCount() : Map<Integer, Integer>
    + getQuorumIndexMappping() : Map<Integer, Integer>
    + getQuorumMessageType() : int
    + getSortedFinalMap() : Map<Integer, Integer>
    + getSubEpoch() : int
    + getTotalEffectiveMembers() : int
    + getTotalQuorumMembers() : int
    + getType() : String
    + getUtilitarianClassification() : Map<Integer, Integer>
    + getWalletMapping() : Map<Integer, Integer>
    + getWeakAltruistList() : List<Integer>
    + setAltruistList(altruistList : List<Integer>)
    + setBlackListedMembers(blackListedMembers : Map<Integer, List<Integer>>)
    + setBlockIndex(blockIndex : int)
    + setCurrentSuspendedMembers(currentSuspendedMembers : Set<Integer>)
    + setEffectiveUtilitarianScore(effectiveUtilitarianScore : Map<Integer, Double>)
    + setEpoch(epoch : int)
    + setFairAltruistList(fairAltruistList : List<Integer>)
    + setIdealAltruistList(idealAltruistList : List<Integer>)
    + setInactiveMembers(curentInactiveMembers : Set<Integer>)
    + setMessageComment(input : String)
    + setMessageSender(messageSender : String)
    + setMessagesignature(messageSignature : String)
    + setNodeIndex(nodeIndex : int)
    + setOriginalNodeMap(inOriginalNodeMap : Map<Integer, QuorumOriginal>)
    + setProposedSubEpoch(proposedSubEpoch : int)
    + setQuorumIdInverseMapping(quorumIdInverseMapping : Map<Integer, List<Integer>>)
    + setQuorumIdMappping(quorumIdMapping : Map<Integer, Integer>)
    + setQuorumIdMemberCount(quorumIdMemberCount : Map<Integer, Integer>)
    + setQuorumIndexMappping(quorumIndexMapping : Map<Integer, Integer>)
    + setQuorumMessageType(input : int)
    + setSortedFinalMap(sortedFinalMap : Map<Integer, Integer>)
    + setSubEpoch(subepoch : int)
    + setTotalEffectiveMembers(input : int)
    + setTotalQuorumMembers(input : int)
    + setType(type : String)
    + setUtilitarianClassification(utilitarianClassification : Map<Integer, Integer>)
    + setWalletMapping(inWalletMapping : Map<Integer, Integer>)
    + setWeakAltruistList(weakAltruistList : List<Integer>)
    + toString() : String
  }
  class QuorumOriginal {
    ~ quorumOriginalMapping : Map<Integer, Integer>
    + QuorumOriginal()
    + addOriginalMapping(quorumIndex : int, nodeId : int)
    + getQuorumOriginalMappping() : Map<Integer, Integer>
    + setQuorumOriginalMappping(quorumOriginalMapping : Map<Integer, Integer>)
  }
  class Synchronizer {
    + commitconsensusReached : Map<String, Boolean>
    + consensusincourse : boolean
    + roundchangeconsensusReached : Map<Integer, Boolean>
    + thresholdReached : boolean
    + Synchronizer()
  }
  class UtilitarianBlockScore {
    ~ blockno : int
    ~ interblockTimecoefficient : double
    ~ nodeIndex : int
    ~ peerUtilitarianCommitScoreMap : Map<Integer, Double>
    ~ peerUtilitarianHeartBeatScoreMap : Map<Integer, Double>
    ~ peerUtilitarianMaliciousScoreMap : Map<Integer, Double>
    ~ peerUtilitarianMissedCommitScoreMap : Map<Integer, Double>
    ~ peerUtilitarianMissedHeartBeatScoreMap : Map<Integer, Double>
    ~ peerUtilitarianMissedProposalScoreMap : Map<Integer, Double>
    ~ peerUtilitarianProposalScoreMap : Map<Integer, Double>
    ~ subEpoch : int
    + UtilitarianBlockScore(nodeIndex : int, blockno : int, subEpoch : int, peerUtilitarianProposalScoreMap : Map<Integer, Double>, peerUtilitarianMissedProposalScoreMap : Map<Integer, Double>, peerUtilitarianCommitScoreMap : Map<Integer, Double>, peerUtilitarianMissedCommitScoreMap : Map<Integer, Double>, peerUtilitarianHeartBeatScoreMap : Map<Integer, Double>, peerUtilitarianMissedHeartBeatScoreMap : Map<Integer, Double>, peerUtilitarianMaliciousScoreMap : Map<Integer, Double>, interblockTimecoefficient : double)
    + getBlockNo() : int
    + getInterblockTimecoefficient() : double
    + getNodeIndex() : int
    + getPeerUtilitarianCommitScoreMap() : Map<Integer, Double>
    + getPeerUtilitarianHeartBeatScoreMap() : Map<Integer, Double>
    + getPeerUtilitarianMaliciousBeatScoreMap() : Map<Integer, Double>
    + getPeerUtilitarianMissedCommitScoreMap() : Map<Integer, Double>
    + getPeerUtilitarianMissedHeartBeatScoreMap() : Map<Integer, Double>
    + getPeerUtilitarianMissedProposalScoreMap() : Map<Integer, Double>
    + getSubEpoch() : int
    + getpeerUtilitarianScoreMap() : Map<Integer, Double>
    + setBlockNo(inBlockno : int)
    + setInterblockTimecoefficient(interblockTimecoefficient : double)
    + setNodeIndex(nodeIndex : int)
    + setPeerMaliciousBeatScoreMap(inMaliciousScoreMap : Map<Integer, Double>)
    + setPeerUtilitarianHeartBeatScoreMap(inPeerHeartBeatScoreMap : Map<Integer, Double>)
    + setPeerUtilitarianMissedCommitScoreMap(inPeerUtilitarianMissedCommitScoreMap : Map<Integer, Double>)
    + setPeerUtilitarianMissedHeartBeatScoreMap(inPeerMissedHeartBeatScoreMap : Map<Integer, Double>)
    + setPeerUtilitarianMissedProposalScoreMap(inPeerUtilitarianMissedProposalScoreMap : Map<Integer, Double>)
    + setSubEpoch(inSubEpoch : int)
    + setpeerUtilitarianCommitScoreMap(inPeerUtilitarianCommitScoreMap : Map<Integer, Double>)
    + setpeerUtilitarianProposalScoreMap(inPeerUtilitarianProposalScoreMap : Map<Integer, Double>)
    + toString() : String
  }
  class UtilitarianCalculator {
    + blockchain : Blockchain
    + heartBeatStorage : HeartBeatStorage
    + quorumStorage : QuorumStorage
    + utilitarianScoreStorage : UtilitarianScoreStorage
    + wallet : Wallet
    + UtilitarianCalculator(blockchain : Blockchain, heartBeatStorage : HeartBeatStorage, quorumStorage : QuorumStorage, utilitarianScoreStorage : UtilitarianScoreStorage, wallet : Wallet)
    + formQuorumMessageForNextSubEpoch(proposedSubEpoch : int, type : int, blockIndex : int) : QuorumMessage
    + formUtilitarianClassification(idealAltruistList : List<Integer>, altruistList : List<Integer>, fairAltruistList : List<Integer>, weakAltruistList : List<Integer>) : Map<Integer, Integer>
    + getUtilitarianBlockScore(currentBlock : Block, blockChain : Blockchain, heartBeatStorage : HeartBeatStorage) : UtilitarianBlockScore
    + populateHeartBeatWin(quorumMembers : List<Integer>, blockTime : Timestamp) : List<Integer>
    + populateQuorumIndexMappingandMemberCountandOriginalNode(quorumIndexMapping : Map<Integer, Integer>, quorumIdMemberCount : Map<Integer, Integer>, quorumIdInverseMapping : Map<Integer, List<Integer>>, originalNodeMap : Map<Integer, QuorumOriginal>)
    + populateWalletMapping(sortedMap : Map<Integer, Integer>) : Map<Integer, Integer>
    + removeBlackList(finalSortedMap : Map<Integer, Integer>, consolidatedAltruistList : List<Integer>) : Map<Integer, Integer>
    + updateQuorumMessage(quorumMessage : QuorumMessage)
    + updateScoreMap(scoreMap : Map<Integer, Double>, scorers : List<Integer>, scorefactor : double)
    + updateScoreMapwithFairness(scoreMap : Map<Integer, Double>, scorers : List<Integer>, scorefactor : double)
  }
}
package org.renaultleat.network {
  class HeartBeatStorage {
    + peerUtilitarianHeartBeat : Map<Integer, Timestamp>
    + HeartBeatStorage()
    + getActivePeers() : List<Integer>
    + getLatestPeerHeartBeat(index : int) : Timestamp
    + getPeerUtilitarianHeartBeat() : Map<Integer, Timestamp>
    + incrementPeerHeartBeat(index : int, inTimeStamp : Timestamp)
    + setEffectiveUtilitarianScore(peerUtilitarianHeartBeat : Map<Integer, Timestamp>)
  }
  class MainGrid {
    ~ altuismGridValues : JsonArray
    ~ gridHeaderArray : JsonArray
    ~ scoreJSONValues : JsonArray
    + MainGrid()
    + getAltuismGridValues() : JsonArray
    + getGridHeaderArray() : JsonArray
    + getScoreJSONValues() : JsonArray
    + setAltuismGridValues(altuismGridValues : JsonArray)
    + setGridHeaderArray(gridHeaderArray : JsonArray)
    + setScoreJSONValues(scoreJSONValues : JsonArray)
  }
  class NetworkTopologyGenerator {
    + NetworkTopologyGenerator()
    + generateRingLatticeTopologyCSV(totalNodeCount : int, meanDegree : int) {static}
    + generateWattsStrogatzTopologyCSV(totalNodeCount : int, meanDegree : int) {static}
    + main(args : String[]) {static}
    + writeToCSV(totalConnectionMap : Map<Integer, Map<Integer, Map<Integer, Boolean>>>, topology : String) {static}
  }
  class P2PServer {
    + blockPool : BlockPool
    + blockchain : Blockchain
    + capSEOBFTDemMessagePool : CAPSEOBFTDemMessagePool
    + currentuser : String
    + nodeCommunicator : NodeCommunicator
    + nodeCommunicatorSec : NodeCommunicatorSec
    + nodeCommunicatorTer : NodeCommunicatorTer
    + nonValidator : NonValidator
    + queueResource : QueueResource
    + transactionPool : TransactionPool
    + validator : Validator
    + wallet : Wallet
    + P2PServer(blockChain : Blockchain, transactionPool : TransactionPool, wallet : Wallet, capSEOBFTDemMessagePool : CAPSEOBFTDemMessagePool, validator : Validator, nonValidator : NonValidator, blockPool : BlockPool, nodeCommunicator : NodeCommunicator, queueResource : QueueResource, nodeCommunicatorSec : NodeCommunicatorSec, nodeCommunicatorTer : NodeCommunicatorTer)
    + P2PServer(blockChain : Blockchain, transactionPool : TransactionPool, wallet : Wallet, capSEOBFTDemMessagePool : CAPSEOBFTDemMessagePool, validator : Validator, nonValidator : NonValidator, blockPool : BlockPool, queueResource : QueueResource)
    + broadCastQuorum(data : QuorumMessage)
    + communicate(message : String)
    + connect()
    + connectToPeers()
    + getNodeCommunicator() : NodeCommunicator
    + getNodeCommunicatorSec() : NodeCommunicatorSec
    + getNodeCommunicatorTer() : NodeCommunicatorTer
    + getPeerList() : List<String>
    + listenToPeers(user : String, nodeCommunicator : NodeCommunicator, peers : List<String>, nodeCommunicatorSec : NodeCommunicatorSec, nodeCommunicatorTer : NodeCommunicatorTer)
    + setGenesisQuorum()
    + startSimulationBroadcast(no_of_transactions : int, no_of_threads : int)
    + startSimulationBroadcastPrivacySingle(no_of_transactions : int)
    + startSimulationBroadcastSingle(no_of_transactions : int)
  }
  class PrivacyStorage {
    + isPrivacy : boolean {static}
    ~ nodetoprivacyGroupIndexMapping : Map<Integer, Integer>
    + privacyGroupId : int {static}
    + privacyGroups : List<Integer> {static}
    ~ privacyGrouptoNodeIndexMapping : Map<Integer, List<Integer>>
    + PrivacyStorage()
    + getNodetoprivacyGroupIndexMapping() : Map<Integer, Integer>
    + getPrivacyGroupId() : int {static}
    + getPrivacyGroups() : List<Integer> {static}
    + getPrivacyGrouptoNodeIndexMapping() : Map<Integer, List<Integer>>
    + isPrivacy() : boolean {static}
    + setIsPrivacy(input : boolean) {static}
    + setNodetoprivacyGroupIndexMapping(nodetoprivacyGroupIndexMapping : Map<Integer, Integer>)
    + setPrivacyGroupId(input : String) {static}
    + setPrivacyGroups(inPrivacyGroups : List<Integer>) {static}
    + setPrivacyGrouptoNodeIndexMapping(privacyGrouptoNodeIndexMapping : Map<Integer, List<Integer>>)
  }
  class QueueResource {
    ~ finaliseBlockingQueue : BlockingQueue<JSONObject>
    ~ fullBlockBlockingQueue : BlockingQueue<JSONObject>
    ~ heartBeatBlockingQueue : BlockingQueue<JSONObject>
    ~ messageBlockingQueue : BlockingQueue<JSONObject>
    ~ privacyBlockingQueue : BlockingQueue<JSONObject>
    ~ quorumBlockingQueue : BlockingQueue<JSONObject>
    ~ transactionBlockingQueue : BlockingQueue<JSONObject>
    ~ transactionBlockingQueueSec : BlockingQueue<JSONObject>
    ~ transactionBlockingQueueTer : BlockingQueue<JSONObject>
    + QueueResource()
    + getFinaliseBlockingQueue() : BlockingQueue<JSONObject>
    + getFullBlockBlockingQueue() : BlockingQueue<JSONObject>
    + getHeartBeatBlockingQueue() : BlockingQueue<JSONObject>
    + getMessageBlockingQueue() : BlockingQueue<JSONObject>
    + getPrivacyBlockingQueue() : BlockingQueue<JSONObject>
    + getQuorumBlockingQueue() : BlockingQueue<JSONObject>
    + getTransactionBlockingQueue() : BlockingQueue<JSONObject>
    + getTransactionBlockingQueueSec() : BlockingQueue<JSONObject>
    + getTransactionBlockingQueueTer() : BlockingQueue<JSONObject>
    + setFinaliseBlockingQueue(finaliseBlockingQueue : BlockingQueue<JSONObject>)
    + setHeartBeatBlockingQueue(heartBeatBlockingQueue : BlockingQueue<JSONObject>)
    + setMessageBlockingQueue(messageBlockingQueue : BlockingQueue<JSONObject>)
    + setPrivacyBlockingQueue(privacyBlockingQueue : BlockingQueue<JSONObject>)
    + setQuorumBlockingQueue(quorumBlockingQueue : BlockingQueue<JSONObject>)
    + setTransactionBlockingQueue(transactionBlockingQueue : BlockingQueue<JSONObject>)
    + setfullBlockBlockingQueue(fullBlockBlockingQueue : BlockingQueue<JSONObject>)
  }
  class QuorumStorage {
    ~ altruistList : List<Integer>
    + currentmembersinsideurquorum : int {static}
    + effectiveUtilitarianScore : Map<Integer, Map<Integer, Double>>
    ~ fairAltruistList : List<Integer>
    ~ idealAltruistList : List<Integer>
    ~ interQuorumApprovals : int
    ~ intraQuorumApprovals : int
    + quorumInitialised : boolean {static}
    + quorumMessageMap : NavigableMap<Integer, QuorumMessage>
    + quorumid : int {static}
    + quorumindex : int {static}
    + totaleffectivemembers : int {static}
    + totalquorummembers : int {static}
    + utilitarianClassification : Map<Integer, Integer>
    ~ weakAltruistList : List<Integer>
    + QuorumStorage()
    + addNodeToClassification(index : int, classification : int)
    + getCurrentmembersinsideurquorum() : int
    + getEffectiveUtilitarianScore() : Map<Integer, Map<Integer, Double>>
    + getFairnessCoefficient(index : int) : double
    + getInterQuorumApprovals() : int
    + getIntraQuorumApprovals() : int
    + getMembersofaQuorum(subepoch : int, quorumId : int) : int
    + getPartialBlockProposerOriginalIndex(subEpoch : int, quorumId : int, indexWithinQuorum : int) : int
    + getQuorumId() : int {static}
    + getQuorumIndex() : int {static}
    + getQuorumMessageMap() : NavigableMap<Integer, QuorumMessage>
    + getRawEffectiveUtilitarianScore() : Map<Integer, Map<Integer, Double>>
    + getRawQuorumSuspension(blockchainCounter : int) : Map<Integer, String>
    + getRawUtilitarianClassification(blockchainCounter : int) : Map<Integer, Map<Integer, String>>
    + getTotalEffectiveMembers() : int {static}
    + getTotalQuorumMembers() : int
    + setCurrentmembersinsideurquorum(input : int)
    + setEffectiveUtilitarianScore(effectiveUtilitarianScore : Map<Integer, Map<Integer, Double>>)
    + setInterQuorumApprovals(input : int)
    + setIntraQuorumApprovals(input : int)
    + setQuorumId(input : int) {static}
    + setQuorumIndex(input : int) {static}
    + setTotalEffectiveMembers(input : int) {static}
    + setTotalQuorumMembers(input : int)
    + toString() : String
    + updateQuorumId(quorumMessage : QuorumMessage, wallet : Wallet) {static}
    + updateQuorumIndex(quorumMessage : QuorumMessage, wallet : Wallet) {static}
    + updateQuorumMessage(quorumMessage : QuorumMessage, wallet : Wallet)
  }
  class UtilitarianScoreStorage {
    + PeerUtilitarianBlockProposalScore : Map<Integer, Map<Integer, Double>>
    + PeerUtilitarianCommitScore : Map<Integer, Map<Integer, Double>>
    + PeerUtilitarianHeartBeatScore : Map<Integer, Map<Integer, Double>>
    + PeerUtilitarianMaliciousScore : Map<Integer, Map<Integer, Double>>
    + PeerUtilitarianMissedBlockProposalScore : Map<Integer, Map<Integer, Double>>
    + PeerUtilitarianMissedCommitScore : Map<Integer, Map<Integer, Double>>
    + PeerUtilitarianMissedHeartBeatScore : Map<Integer, Map<Integer, Double>>
    + interBlockTimeCoefficient : Map<Integer, Map<Integer, Double>>
    + UtilitarianScoreStorage()
    + getInterBlockTimeCoefficient() : String
    + getPeerHeartBeatScore(index : int, subepoch : int) : double
    + getPeerMaliciousScore(index : int, subepoch : int) : double
    + getPeerMissedHeartBeatScore(index : int, subepoch : int) : double
    + getPeerUtilitarianBlockProposalScore() : String
    + getPeerUtilitarianCommitScore() : String
    + getPeerUtilitarianHeartBeatScore() : String
    + getPeerUtilitarianMaliciousScore() : String
    + getPeerUtilitarianMissedBlockProposalScore() : String
    + getPeerUtilitarianMissedCommitScore() : String
    + getPeerUtilitarianMissedHeartBeatScore() : String
    + getRawInterBlockTimeCoefficient() : Map<Integer, Map<Integer, Double>>
    + getRawPeerUtilitarianBlockProposalScore() : Map<Integer, Map<Integer, Double>>
    + getRawPeerUtilitarianCommitScore() : Map<Integer, Map<Integer, Double>>
    + getRawPeerUtilitarianHeartBeatScore() : Map<Integer, Map<Integer, Double>>
    + getRawPeerUtilitarianMaliciousScore() : Map<Integer, Map<Integer, Double>>
    + getRawPeerUtilitarianMissedBlockProposalScore() : Map<Integer, Map<Integer, Double>>
    + getRawPeerUtilitarianMissedCommitScore() : Map<Integer, Map<Integer, Double>>
    + getRawPeerUtilitarianMissedHeartBeatScore() : Map<Integer, Map<Integer, Double>>
    + getUtilitarianBlockProposalScore(index : int, subepoch : int) : double
    + getUtilitarianCommitScore(index : int, subepoch : int) : double
    + getUtilitarianMissedBlockProposalScore(index : int, subepoch : int) : double
    + getUtilitarianMissedCommitScore(index : int, subepoch : int) : double
    + incrementPeerHeartBeatScore(index : int, subepoch : int, score : double)
    + incrementPeerMaliciousScore(index : int, subepoch : int, score : double)
    + incrementPeerMissedHeartBeatScore(index : int, subepoch : int, score : double)
    + incrementUtilitarianBlockProposalScore(index : int, subepoch : int, score : double)
    + incrementUtilitarianCommitScore(index : int, subepoch : int, score : double)
    + incrementUtilitarianMissedBlockProposalScore(index : int, subepoch : int, score : double)
    + incrementUtilitarianMissedCommitScore(index : int, subepoch : int, score : double)
    + incrementblockTimeCoefficient(subepoch : int, blockno : int, coefficient : double)
    + updateAtruismBlockStorage(utilitarianBlockScore : UtilitarianBlockScore)
  }
}
package org.renaultleat.properties {
  class CAPSEOBFTProperty {
    + blackListThreshold : int {static}
    + blacklistId : int {static}
    + blockcommitcore : double {static}
    + blockcommitmisscore : double {static}
    + blockproposalcore : double {static}
    + blockproposalmisscore : double {static}
    + conversioncoefficient : double {static}
    + defaultTimeStampDifference : int {static}
    + defaultcoefficient : double {static}
    + epochthreshold : int {static}
    + fairnessAltruistsCoefficient : double {static}
    + fairnessFairAltruistsCoefficient : double {static}
    + fairnessIdealAltruistsCoefficient : double {static}
    + fairnessWeakAltruistsCoefficient : double {static}
    + firstrangelowerindex : int {static}
    + firstrangeupperindex : int {static}
    + fourthrangelowerindex : int {static}
    + fourthrangeupperindex : int {static}
    + genesisindex : int {static}
    + heartbeatscore : double {static}
    + maliciousscore : double {static}
    + minmembersinsidequoum : int {static}
    + minquorumforblacklist : int {static}
    + missedheartbeatscore : double {static}
    + normalFulfillment : String {static}
    + normalPartialFulfillment : String {static}
    + normalPartialProposal : String {static}
    + normalProposal : String {static}
    + normalQuorumMessage : int {static}
    + requestPrivacyMessage : String {static}
    + responsePrivacyMesage : String {static}
    + roundChangeQuorumMessage : int {static}
    + secondrangelowerindex : int {static}
    + secondrangeupperindex : int {static}
    + secondupperindex : int {static}
    + subepochthreshold : int {static}
    + thirdrangelowerindex : int {static}
    + thirdrangeupperindex : int {static}
    + timethreshold : double {static}
    + totalclassification : int {static}
    + totalquorums : int {static}
    + totalweakmemberpercent : int {static}
    + upperindex : int {static}
    + CAPSEOBFTProperty()
    + getBlackListThreshold() : int {static}
    + getEpochThreshold() : int {static}
    + getSubEpochThreshold() : int {static}
    + getTotalQuorums() : int {static}
    + setBlackListThreshold(input : int) {static}
    + setEpochThreshold(input : int) {static}
    + setSubEpochThreshold(input : int) {static}
    + setTotalquorums(input : int) {static}
  }
  class CAPSEOHashPointProperty {
    + fullblockfulfillercodePoint : int {static}
    + fullblockproposercodePoint : int {static}
    + partialblockfulfillercodePoint : int {static}
    + partialblockproposercodePoint : int {static}
    + quorumproposercodePoint : int {static}
    + rivalpartialblockproposercodePoint : int {static}
    + roundchangequorumproposercodePoint : int {static}
    + transactioncodePoint : int {static}
    + CAPSEOHashPointProperty()
  }
  class NodeDevProperty {
    + blocksize : int {static}
    + deployed : String {static}
    + ip : String {static}
    + minapprovals : int {static}
    + nodeid : int {static}
    + nodeid_sec : int {static}
    + ports : String {static}
    + totalkeys : int {static}
    + totalnodes : int {static}
    + users : String {static}
    + NodeDevProperty()
  }
  class NodeProperty {
    + blocksize : int {static}
    + deployed : String {static}
    + fullBlockFullfillment : long {static}
    + heartBeatBroadcast : long {static}
    + httpports : String {static}
    + ip : String {static}
    + ips : String {static}
    + isValidator : boolean {static}
    + latency : long {static}
    + nodeBehavior : int {static}
    + nodeNetwork : String {static}
    + partialBlockFullfillment : long {static}
    + peercount : int {static}
    + peers : String {static}
    + port : String {static}
    + ports : String {static}
    + roundChange : long {static}
    + threshold : int {static}
    + totalkeys : int {static}
    + totalnodes : int {static}
    + user : String {static}
    + users : String {static}
    + validators : int {static}
    + NodeProperty()
    + getBlockSize() : int {static}
    + getCurrentPort() : int {static}
    + getFullBlockFullfillment() : long {static}
    + getHeartBeatBroadcast() : long {static}
    + getIP() : String {static}
    + getIPS() : String {static}
    + getPartialBlockFullfillment() : long {static}
    + getPeerCount() : int {static}
    + getPeers() : String {static}
    + getRoundChange() : long {static}
    + getValidators() : int {static}
    + getnodeBehavior() : int {static}
    + getnodeLatency() : long {static}
    + getnodeNetwork() : String {static}
    + gettotalNodes() : int {static}
    + isValidator() : boolean {static}
    + setBlockSize(input : int) {static}
    + setFullBlockFullfillment(input : long) {static}
    + setHeartBeatBroadcast(input : long) {static}
    + setIPS(input : String) {static}
    + setIsValidator(input : boolean) {static}
    + setPartialBlockFullfillment(input : long) {static}
    + setPeerCount(input : int) {static}
    + setPeers(input : String) {static}
    + setRoundChange(input : long) {static}
    + setValidators(input : int) {static}
    + setnodeBehavior(input : int) {static}
    + setnodeLatency(input : long) {static}
    + setnodeNetwork(input : String) {static}
    + settotalNodes(input : int) {static}
  }
}
package org.renaultleat.node {
  class NonValidator {
    ~ allNodePublicKeys : List<String>
    + NonValidator()
    + generateAddresses() : List<String>
    + isValidNonValidator(nodePublicKey : String) : boolean
  }
  class Transaction {
    + from : String
    + groupPrivacyid : int
    + hash : String
    + id : String
    + input : String
    + isPrivate : boolean
    + nodeid : String
    + nodeindex : int
    + signature : String
    + timestamp : Timestamp
    + Transaction(data : String, wallet : Wallet)
    + Transaction(data : String, wallet : Wallet, isPrivacy : boolean)
    + Transaction(id : String, from : String, nodeId : String, nodeIndex : int, input : String, inputTimestamp : Timestamp, hash : String, signature : String)
    + getFrom() : String
    + getGroupPrivacyid() : int
    + getHash() : String
    + getId() : String
    + getInput() : String
    + getNodeid() : String
    + getNodeindex() : int
    + getSignature() : String
    + getTimestamp() : Timestamp
    + isPrivateTransaction() : boolean
    + setFrom(from : String)
    + setGroupPrivacyid(groupPrivacyId : int)
    + setHash(hash : String)
    + setId(id : String)
    + setInput(input : String)
    + setNodeid(nodeid : String)
    + setNodeindex(nodeindex : int)
    + setPrivateTransaction(isPrivate : boolean)
    + setSignature(signature : String)
    + setTimestamp(timestamp : Timestamp)
    + verifyTransaction(transaction : Transaction) : boolean {static}
  }
  class Validator {
    ~ allNodePublicKeys : List<String>
    + Validator()
    + generateAddresses() : List<String>
    + isValidValidator(nodePublicKey : String) : boolean
  }
  class Wallet {
    ~ keypair : KeyPair
    + nodeid : String
    + nodeproperty : int {static}
    + publicKey : String {static}
    + Wallet()
    + createTransaction(message : String) : Transaction
    + decryptPrivacyData(message : String) : String
    + getKeyPair() : KeyPair
    + getNodeId() : String
    + getNodeproperty() : int {static}
    + getPrivacyData(message : String) : String
    + getPublicKey() : String {static}
    + initalise(index : int)
    + setnodeproperty(input : String) {static}
    + signData(message : String) : String
  }
}
package org.renaultleat.api {
  class CorsResponseFilter {
    + CorsResponseFilter()
    + filter(requestContext : ContainerRequestContext, responseContext : ContainerResponseContext)
  }
  class Simulator_controller {
    ~ blockPool : BlockPool
    ~ blockchain : Blockchain
    ~ capSEOBFTDemConsensusMessageHandler : CAPSEOBFTDemConsensusMessageHandler
    ~ capSEOBFTDemConsensusRoundChangeHandler : CAPSEOBFTDemConsensusRoundChangeHandler
    ~ capSEOBFTDemFinaliseHandler : CAPSEOBFTDemFinaliseHandler
    ~ capSEOBFTDemFullBlockFullfiller : CAPSEOBFTDemFullBlockFullfiller
    ~ capSEOBFTDemFullBlockHandler : CAPSEOBFTDemFullBlockHandler
    ~ capSEOBFTDemFullBlockManager : CAPSEOBFTDemFullBlockManager
    ~ capSEOBFTDemHeartBeatHandler : CAPSEOBFTDemHeartBeatHandler
    ~ capSEOBFTDemHeartBeatManager : CAPSEOBFTDemHeartBeatManager
    ~ capSEOBFTDemMessagePool : CAPSEOBFTDemMessagePool
    ~ capSEOBFTDemPartialBlockFullfiller : CAPSEOBFTDemPartialBlockFullfiller
    ~ capSEOBFTDemPrivacyHandler : CAPSEOBFTDemPrivacyHandler
    ~ capSEOBFTDemQuorumManager : CAPSEOBFTDemQuorumManager
    ~ capSEOBFTDemQuorumMessageHandler : CAPSEOBFTDemQuorumMessageHandler
    ~ capSEOBFTDemTransactionMessageHandler : CAPSEOBFTDemTransactionMessageHandler
    ~ capSEOBFTDemTransactionMessageHandlerSec : CAPSEOBFTDemTransactionMessageHandlerSec
    ~ capSEOBFTDemTransactionMessageHandlerTer : CAPSEOBFTDemTransactionMessageHandlerTer
    ~ capSEOBFTPartialBlockManager : CAPSEOBFTPartialBlockManager
    ~ gson : Gson
    ~ heartBeatStorage : HeartBeatStorage
    ~ nonValidator : NonValidator
    ~ p2pserver : P2PServer
    ~ privacyStorage : PrivacyStorage
    ~ queueResource : QueueResource
    ~ quorumStorage : QuorumStorage
    ~ simulator_collator : Simulator_collator
    ~ simulator_result : Simulator_result
    ~ simulator_service : Simulator_service
    ~ synchronizer : Synchronizer
    ~ transactionPool : TransactionPool
    ~ utilitarianCalculator : UtilitarianCalculator
    ~ utilitarianScoreStorage : UtilitarianScoreStorage
    ~ validator : Validator
    ~ wallet : Wallet
    + Simulator_controller()
    + getAllScore() : String
    + getAsValidator() : String
    + getBlackListThreshold() : String
    + getBlockNo() : String
    + getBlockSize() : String
    + getBlocks() : String
    + getBlocksSize() : String
    + getBlocksinPool() : String
    + getCommitRate() : String
    + getEphemeralBlocks() : String
    + getEpochThreshold(value : String) : String
    + getFinaliseRate() : String
    + getFinalisedTPS() : String
    + getFullBlockFullfillment() : String
    + getHeartBeat() : String
    + getHeartBeatRate() : String
    + getHeartBeatStorage() : String
    + getIP() : String
    + getInterBlockTimecoefficient() : String
    + getNodeBehavior() : String
    + getNodeLatency() : String
    + getNodeNetwork() : String
    + getNodeProperty() : String
    + getPartialBlockFullfillment() : String
    + getPartialPS() : String
    + getPeerUtilitarianBlockProposalScore() : String
    + getPeerUtilitarianCommitScore() : String
    + getPeerUtilitarianHeartBeatScore() : String
    + getPeerUtilitarianMaliciousScore() : String
    + getPeerUtilitarianMissedBlockProposalScore() : String
    + getPeerUtilitarianMissedCommitScore() : String
    + getPeerUtilitarianMissedHeartBeatScore() : String
    + getPeers() : String
    + getPrepareRate() : String
    + getPrivacyId(value : String) : String
    + getProcessedTPS() : String
    + getQuorumRate() : String
    + getQuorumStorage(subepoch : String) : String
    + getQuorumSuspensionGrid() : String
    + getRoundChange() : String
    + getRoundChangeRate() : String
    + getSubEpochThreshold(value : String) : String
    + getTotalNodes() : String
    + getTotalQuorums(value : String) : String
    + getTotalValidators() : String
    + getTransactionStorage(roundno : String) : String
    + getTransactionsValidatedNo() : String
    + getTransactionsinPoolNo(roundno : String) : String
    + getUtilitarianBlockProposalScoreGrid() : String
    + getUtilitarianBlockProposalScoreGridNonCumul() : String
    + getUtilitarianClassificationGrid() : String
    + getUtilitarianCommitScoreGrid() : String
    + getUtilitarianCommitScoreGridNonCumul() : String
    + getUtilitarianEffectiveScoreGrid() : String
    + getUtilitarianEffectiveScoreGridNonCumul() : String
    + getUtilitarianHeartBeatScoreGrid() : String
    + getUtilitarianHeartBeatScoreGridNonCumul() : String
    + getUtilitarianInterBlockTimeCoefficientGrid() : String
    + getUtilitarianMaliciousScoreGrid() : String
    + getUtilitarianMaliciousScoreGridNonCumul() : String
    + getUtilitarianMissedBlockProposalScoreGrid() : String
    + getUtilitarianMissedBlockProposalScoreGridNonCumul() : String
    + getUtilitarianMissedCommitScoreGrid() : String
    + getUtilitarianMissedCommitScoreGridNonCumul() : String
    + getUtilitarianMissedHeartBeatScoreGrid() : String
    + getUtilitarianMissedHeartBeatScoreGridNonCumul() : String
    + getVersion() : String
    + initialise() : String
    + initialiseQuorum() : String
    + initiateConnection() : String
    + listentoPeers() : String
    + sendMessageToPeer(message : String) : String
    + setEpochThreshold(value : String) : String
    + setFullBlockFullfillment(value : String) : String
    + setHeartBeat(value : String) : String
    + setInitialQuorum() : String
    + setPartialBlockFullfillment(value : String) : String
    + setPrivacyId(value : String) : String
    + setRoundchangeTimeOut(value : String) : String
    + setSubEpochThreshold(value : String) : String
    + setTotalQuorums(value : String) : String
    + startResultCollator() : String
    + startSimulation1(notxs : String) : String
    + startSimulation2(notxs : String) : String
    + startSimulation3(notxs : String) : String
    + startSimulation4(notxs : String) : String
    + startSimulation5(notxs : String) : String
    + startSimulation6(notxs : String) : String
    + startSimulationSingle(notxs : String) : String
    + startSimulationSinglePrivacy(notxs : String) : String
    + stopResultCollator() : String
    + storeAsValidator(value : String) : String
    + storeBlackListThreshold(value : String) : String
    + storeBlockSize(value : String) : String
    + storeNodeBehavior(value : String) : String
    + storeNodeLatency(value : String) : String
    + storeNodeNetwork(value : String) : String
    + storeNodeProperty(value : String) : String
    + storePeers(value : String) : String
    + storeTotalEffectiveMembers(value : String) : String
    + storeTotalNodes(value : String) : String
    + storeTotalValidators(value : String) : String
  }
  class Simulator_result {
    + commitConsensusCounterStorage : Map<Timestamp, Integer>
    + finaliseConsensusCounterStorage : Map<Timestamp, Integer>
    + finalisedTpsStorage : Map<Timestamp, Integer>
    + heartBeatConsensusCounterStorage : Map<Timestamp, Integer>
    + inputTpsStorage : SortedMap<Timestamp, Integer>
    + partialTpsStorage : Map<Timestamp, Integer>
    + proposeConsensusCounterStorage : Map<Timestamp, Integer>
    + quorumConsensusCounterStorage : Map<Timestamp, Integer>
    + roundChangeConsensusCounterStorage : Map<Timestamp, Integer>
    + Simulator_result()
    + getCommitConsensusCounterStorage() : Map<Timestamp, Integer>
    + getFinaliseConsensusCounterStorage() : Map<Timestamp, Integer>
    + getFinalisedTPSStorage() : Map<Timestamp, Integer>
    + getHeartBeatConsensusCounterStorage() : Map<Timestamp, Integer>
    + getInputTPSStorage() : Map<Timestamp, Integer>
    + getPartialTPSStorage() : Map<Timestamp, Integer>
    + getProposeConsensusCounterStorage() : Map<Timestamp, Integer>
    + getQuorumConsensusCounterStorage() : Map<Timestamp, Integer>
    + getRoundChangeConsensusCounterStorage() : Map<Timestamp, Integer>
  }
  class Simulator_service {
    ~ blockchain : Blockchain
    ~ heartBeatStorage : HeartBeatStorage
    ~ p2pServer : P2PServer
    ~ quorumStorage : QuorumStorage
    ~ simulator_result : Simulator_result
    ~ utilitarianScoreStorage : UtilitarianScoreStorage
    ~ wallet : Wallet
    + Simulator_service(p2pServer : P2PServer, wallet : Wallet, simulator_result : Simulator_result, utilitarianScoreStorage : UtilitarianScoreStorage, heartBeatStorage : HeartBeatStorage, blockchain : Blockchain, quorumStorage : QuorumStorage)
    + Simulator_service(wallet : Wallet)
    + getAllScore() : String
    + getAsValidator() : boolean
    + getBlackListThreshold() : int
    + getBlockSize() : int
    + getBlocks() : String
    + getBlocksSize() : String
    + getBlocksinBlockPool() : String
    + getCommitMPS() : Map<Timestamp, Integer>
    + getCommitMPSJSON() : List<JSONObject>
    + getEphemeralBlocks() : String
    + getEpochThreshold() : int
    + getFinaliseMPS() : Map<Timestamp, Integer>
    + getFinaliseMPSJSON() : List<JSONObject>
    + getFinalisedTPS() : Map<Timestamp, Integer>
    + getFinalisedTPSJSON() : List<JSONObject>
    + getFullBlockFullfillment() : long
    + getHeartBeat() : long
    + getHeartBeatMPS() : Map<Timestamp, Integer>
    + getHeartBeatStorage() : String
    + getHeatBeatMPSJSON() : List<JSONObject>
    + getIP() : String
    + getIPS() : String
    + getInputTPS() : Map<Timestamp, Integer>
    + getInputTPSJSON() : List<JSONObject>
    + getInterBlockTimeCoefficient() : String
    + getJSONData(objData : Map<Timestamp, Integer>) : List<JSONObject>
    + getJSONMPSData(objData : Map<Timestamp, Integer>) : List<JSONObject>
    + getMPS(inMPSStorage : Map<Timestamp, Integer>) : Map<Timestamp, Integer>
    + getMPSGrowth(inMPSStorage : Map<Timestamp, Integer>) : Map<Timestamp, Integer>
    + getNodeBehavior() : String
    + getNodeLatency() : long
    + getNodeNetwork() : String
    + getNodeProperty() : int
    + getNoofBlocks() : int
    + getPartialBlockFullfillment() : long
    + getPartialTPS() : Map<Timestamp, Integer>
    + getPartialTPSJSON() : List<JSONObject>
    + getPeerUtilitarianBlockProposalScore() : String
    + getPeerUtilitarianCommitScore() : String
    + getPeerUtilitarianHeartBeatScore() : String
    + getPeerUtilitarianMaliciousScore() : String
    + getPeerUtilitarianMissedBlockProposalScore() : String
    + getPeerUtilitarianMissedCommitScore() : String
    + getPeerUtilitarianMissedHeartBeatScore() : String
    + getPrivacyId() : int
    + getProposeMPS() : Map<Timestamp, Integer>
    + getProposeMPSJSON() : List<JSONObject>
    + getQuorumMPS() : Map<Timestamp, Integer>
    + getQuorumMPSJSON() : List<JSONObject>
    + getQuorumSuspensionGrid() : MainGrid
    + getRoundChange() : long
    + getRoundChangeMPS() : Map<Timestamp, Integer>
    + getRoundChangeMPSJSON() : List<JSONObject>
    + getSubEpochThreshold() : int
    + getTotalNodes() : int
    + getTotalQuorums() : int
    + getTotalTransactionsValidatedNo() : String
    + getTotalValidators() : int
    + getTransactionsinPoolNo(roundno : String) : String
    + getTransactionsinStorage(roundno : String) : String
    + getUtilitarianBlockProposalScoreGrid() : MainGrid
    + getUtilitarianBlockProposalScoreGridNonCumul() : MainGrid
    + getUtilitarianClassificationGrid() : MainGrid
    + getUtilitarianCommitScoreGrid() : MainGrid
    + getUtilitarianCommitScoreGridNonCumul() : MainGrid
    + getUtilitarianEffectiveScoreGrid() : MainGrid
    + getUtilitarianEffectiveScoreGridNonCumul() : MainGrid
    + getUtilitarianHeartBeatScoreGrid() : MainGrid
    + getUtilitarianHeartBeatScoreGridNonCumul() : MainGrid
    + getUtilitarianInterBlockTimeCoefficientGrid() : MainGrid
    + getUtilitarianMaliciousScoreGrid() : MainGrid
    + getUtilitarianMaliciousScoreGridNonCumul() : MainGrid
    + getUtilitarianMissedBlockProposalScoreGrid() : MainGrid
    + getUtilitarianMissedBlockProposalScoreGridNonCumul() : MainGrid
    + getUtilitarianMissedCommitScoreGrid() : MainGrid
    + getUtilitarianMissedCommitScoreGridNonCumul() : MainGrid
    + getUtilitarianMissedHeartBeatScoreGrid() : MainGrid
    + getUtilitarianMissedHeartBeatScoreGridNonCumul() : MainGrid
    + getVersion() : String
    + initiateConnection()
    + listentoPeers()
    + populateGridClassificationObject(storageMap : Map<Integer, Map<Integer, String>>, gridHeader : JsonArray, classificationValues : JsonArray)
    + populateGridNonCumulativeObject(storageMap : Map<Integer, Map<Integer, Double>>, gridHeader : JsonArray, scoreValues : JsonArray)
    + populateGridObject(storageMap : Map<Integer, Map<Integer, Double>>, gridHeader : JsonArray, scoreValues : JsonArray)
    + populateGridSuspensionObject(storageMap : Map<Integer, String>, gridHeader : JsonArray, suspendedValues : JsonArray)
    + populateGridTimeObject(storageMap : Map<Integer, Map<Integer, Double>>, gridHeader : JsonArray, timeValues : JsonArray)
    + sendMessageToPeer(message : String)
    + setEpochThreshold(value : String)
    + setFullBlockFullfillment(value : String)
    + setHeartBeat(value : String)
    + setInitialQuorum()
    + setPartialBlockFullfillment(value : String)
    + setPrivacyId(value : String)
    + setRoundChange(value : String)
    + setSubEpochThreshold(value : String)
    + setTotalEffectiveMembers(input : String)
    + setTotalQuorums(value : String)
    + startSimulation(notxs : String, nothreads : String)
    + startSimulationSingle(notxs : String)
    + startSimulationSinglePrivacy(notxs : String)
    + storeAsValidator(value : String)
    + storeBlackListThreshold(value : String)
    + storeBlockSize(value : String)
    + storeIPS(value : String)
    + storeNodeBehavior(value : String)
    + storeNodeLatency(value : String)
    + storeNodeNetwork(value : String)
    + storeNodeProperty(value : String)
    + storeTotalNodes(value : String)
    + storeTotalValidators(value : String)
  }
}
package org.renaultleat.crypto {
  class CryptoGroupUtil {
    - privatekeyfile : String {static}
    - pubkeyfile : String {static}
    - CryptoGroupUtil()
    + getDecryptedData(groupId : int, encryptedMessage : String) : String {static}
    + getEncryptedData(index : int, message : String) : String {static}
    + getFileFromResource(fileName : String) : File {static}
    - getFileFromResourceAsStream(fileName : String) : InputStream {static}
    + getHash(data : String) : String {static}
    + getKeyPair(index : int) : KeyPair {static}
    + getPrivateKey(index : int) : PrivateKey {static}
    + getPublicKey(index : int) : PublicKey {static}
    + getPublicKeyString(index : int) : String {static}
    + getSignature(index : int, message : String) : String {static}
    + getUniqueIdentifier() : String {static}
    + verify(index : int, signatureinput : String, message : String) : boolean {static}
    + verify(pubKeyStr : String, signatureinput : String, message : String) : boolean {static}
  }
  class CryptoUtil {
    - privatekeyfile : String {static}
    - pubkeyfile : String {static}
    - CryptoUtil()
    + getFileFromResource(fileName : String) : File {static}
    - getFileFromResourceAsStream(fileName : String) : InputStream {static}
    + getHash(data : String) : String {static}
    + getKeyPair(index : int) : KeyPair {static}
    + getPrivateKey(index : int) : PrivateKey {static}
    + getPublicKey(index : int) : PublicKey {static}
    + getPublicKeyString(index : int) : String {static}
    + getSignature(index : int, message : String) : String {static}
    + getUniqueIdentifier() : String {static}
    + verify(index : int, signatureinput : String, message : String) : boolean {static}
    + verify(pubKeyStr : String, signatureinput : String, message : String) : boolean {static}
  }
  class GroupKeyGenerator {
    + GroupKeyGenerator()
    + generateRSAKeyPair(totalkeys : int) {static}
    + main(args : String[]) {static}
  }
  class NodeKeyGenerator {
    + NodeKeyGenerator()
    + generateRSAKeyPair(totalkeys : int) {static}
    + main(args : String[]) {static}
  }
}
package org.renaultleat.chain {
  class Block {
    ~ blocknumber : int
    ~ blocktime : Timestamp
    ~ epoch : int
    ~ finalised : boolean
    ~ hash : String
    ~ originalproposernodeindex : int
    + partialBlockMap : ConcurrentMap<Integer, PartialBlock>
    ~ previousblockhash : String
    ~ proposalType : String
    ~ proposeCalculatedatindex : int
    ~ proposer : String
    ~ proposernodeindex : int
    ~ roundno : int
    ~ signature : String
    ~ subepoch : int
    ~ temporalHashingState : ConcurrentMap<Integer, HashingState>
    ~ validity : boolean
    + Block()
    + Block(timestamp : Timestamp, previousblockhash : String, currentblockhash : String, partialBlockData : ConcurrentMap<Integer, PartialBlock>, blockproposer : String, signature : String, blocknum : int, round : int, finalised : boolean, temporalHashingState : ConcurrentMap<Integer, HashingState>, epoch : int, subepoch : int, proposeCalculatedatindex : int, proposalType : String)
    + addPartialBlock(partialBlock : PartialBlock, wallet : Wallet)
    + createBlock(lastBlock : Block, data : ConcurrentMap<Integer, PartialBlock>, wallet : Wallet, roundno : int, finalised : boolean, inTemporalHashingState : ConcurrentMap<Integer, HashingState>, epoch : int, subepoch : int) : Block {static}
    + finaliseBlock(lastBlock : Block, data : ConcurrentMap<Integer, PartialBlock>, wallet : Wallet, roundno : int, finalised : boolean, inTemporalHashingState : ConcurrentMap<Timestamp, Map<List<Integer>, String>>, proposeCalculatedatindex : int)
    + generateBlockHash(inblock : Block) : String {static}
    + generateBlockHash(lastblockHash : String, partialBlockMap : ConcurrentMap<Integer, PartialBlock>, proposer : String) : String {static}
    + generateCumulativePartialBlockHash(data : ConcurrentMap<Integer, PartialBlock>) : String {static}
    + generateEffectiveHash(currentPartialHash : String, partialBlockMap : ConcurrentMap<Integer, PartialBlock>) : String {static}
    + generateGenesis() : Block {static}
    + getBlockDetails() : String
    + getBlockHash() : String
    + getBlocknumber() : int
    + getBlocktime() : Timestamp
    + getEpoch() : int
    + getFinalised() : boolean
    + getHash() : String
    + getOriginalProposerNodeIndex() : int
    + getOriginalproposernodeindex() : int
    + getPartialBlockMap() : ConcurrentMap<Integer, PartialBlock>
    + getPreviousblockhash() : String
    + getProposalType() : String
    + getProposeCalculatedatindex() : int
    + getProposer() : String
    + getProposerNodeIndex() : int
    + getProposernodeindex() : int
    + getRoundNo() : int
    + getRoundno() : int
    + getSignature() : String
    + getSignedBlockHash(wallet : Wallet) : String
    + getSignedMaliciousBlockHash(wallet : Wallet) : String
    + getSubEpoch() : int
    + getSubepoch() : int
    + getTemporalHashingState() : ConcurrentMap<Integer, HashingState>
    + getValidity() : boolean
    + isFinalised() : boolean
    + isValidity() : boolean
    + setBlockHash(inHash : String)
    + setBlocknumber(blocknumber : int)
    + setBlocktime(blocktime : Timestamp)
    + setEpoch(inEpoch : int)
    + setFinalised(inFinalised : boolean)
    + setHash(hash : String)
    + setOriginalProposerNodeIndex(inProposerNodeIndex : int)
    + setOriginalproposernodeindex(originalproposernodeindex : int)
    + setPartialBlockMap(inPartialBlockMap : ConcurrentMap<Integer, PartialBlock>)
    + setPreviousblockhash(previousblockhash : String)
    + setProposalType(inProposalType : String)
    + setProposeCalculatedatindex(proposeCalculatedatindex : int)
    + setProposer(proposer : String)
    + setProposerNodeIndex(inProposerNodeIndex : int)
    + setProposernodeindex(proposernodeindex : int)
    + setRoundNo(roundno : int)
    + setRoundno(roundno : int)
    + setSignature(signature : String)
    + setSubEpoch(inSubEpoch : int)
    + setSubepoch(subepoch : int)
    + setTemporalHashingState(inTemporalHashingState : ConcurrentMap<Integer, HashingState>)
    + setValidity(validity : boolean)
    + signBlockHash(blockHash : String, wallet : Wallet) : String {static}
    + toString() : String
    + verifyBlock(block : Block) : boolean {static}
    + verifyProposer(block : Block, proposer : String) : boolean {static}
  }
  class BlockPool {
    + blockIds : CopyOnWriteArrayList<Integer>
    ~ blocks : CopyOnWriteArrayList<Block>
    + BlockPool()
    + addBlock(block : Block)
    + blockExists(inblock : Block) : boolean
    + clearBlockPool()
    + getBlockforHash(blockHash : String) : Block
    + getBlocks() : List<Block>
    + removeBlock(inblockhash : String)
  }
  class Blockchain {
    + blockChainIndexCounter : AtomicInteger
    + blockIds : CopyOnWriteArrayList<Integer>
    ~ chain : NavigableMap<Integer, Block>
    ~ ephemeralchain : NavigableMap<Integer, Block>
    + finalEpochCounter : AtomicInteger
    + finalSubEpochCounter : AtomicInteger
    ~ nonValidator : NonValidator
    ~ nonValidators : CopyOnWriteArrayList<String>
    + partialblockProposeCounter : AtomicInteger
    + partialblockSubEpochCounter : AtomicInteger
    ~ quorumStorage : QuorumStorage
    + roundCounter : AtomicInteger
    ~ validator : Validator
    ~ validators : CopyOnWriteArrayList<String>
    + Blockchain()
    + Blockchain(validator : Validator, nonValidator : NonValidator, quorumStorage : QuorumStorage)
    + addBlock(block : Block) : boolean
    + addBlockToEphmeralChain(block : Block)
    + addFinalisedPartialBlock(wallet : Wallet, inPartialblock : PartialBlock) : String
    + addUpdatedBlock(hash : String, blockPool : BlockPool, pbftMessagePool : CAPSEOBFTDemMessagePool)
    + blockFilled(block : Block) : boolean
    + createBlocknandAddtoEphemeral(wallet : Wallet, round : int) : Block
    + createPartialBlock(block : Block, wallet : Wallet, tempTransactionList : CopyOnWriteArrayList<Transaction>, round : int, blockHeight : int, blockproposer : int, rivalblockproposer : int, proposeCalculatedatindex : int, subepoch : int, inProposalType : String) : PartialBlock
    + finalisedFullBlock(wallet : Wallet, majorindex : int, subEpoch : int, proposeCalculatedatindex : int, proposerIndex : int, proposalType : String) : Block
    + finalisedMaliciousFullBlock(wallet : Wallet, majorindex : int, subEpoch : int, proposeCalculatedatindex : int, proposerIndex : int, proposalType : String) : Block
    + finalisedPartialBlockFilled(inPartialblock : PartialBlock) : boolean
    + getBlockChainIndexCounter() : int
    + getChain() : SortedMap<Integer, Block>
    + getEphemeralChain() : SortedMap<Integer, Block>
    + getFinalEpochCounter() : int
    + getFinalSubEpochCounter() : int
    + getFullBlockFulFiller(majorIndex : int) : ProposerMessage
    + getFullBlockProposer(majorIndex : int) : ProposerMessage
    + getInitialQuorumProposer() : ProposerMessage
    + getNonValidators() : CopyOnWriteArrayList<String>
    + getPartialBlockFulfiller(majorIndex : int, minorIndex : int) : ProposerMessage
    + getPartialBlockProposer(majorIndex : int, minorIndex : int) : ProposerMessage
    + getPartialBlockSubEpochCounter() : int
    + getPartialblockProposeCounter() : int
    + getProposer() : ProposerMessage
    + getQuorumProposer(proposedSubEpoch : int) : ProposerMessage
    + getRivalPartialBlockProposer(majorIndex : int, minorIndex : int) : ProposerMessage
    + getRoundChangeQuorumProposer(proposedSubEpoch : int) : ProposerMessage
    + getRoundCounter() : int
    + getValidators() : CopyOnWriteArrayList<String>
    + incrementAllEpochCountersforRoundChange()
    + incrementFinalEpochCounter()
    + incrementFinalSubEpochCounter()
    + incrementPartialblockProposeCounter()
    + incrementRoundCounter()
    + isReadyforBlockValidity(inblock : Block) : boolean
    + isReadyforPartialBlockValidity(inPartialblock : PartialBlock) : boolean
    + isSubEpochFilled() : boolean
    + isValidBlock(inblock : Block) : boolean
    + isValidBlockFulfiller(block : Block) : boolean
    + isValidBlockProposer(block : Block) : boolean
    + isValidPartialBlock(inPartialblock : PartialBlock) : boolean
    + isValidPartialBlockFulFiller(partialBlock : PartialBlock) : boolean
    + isValidPartialBlockProposer(partialBlock : PartialBlock) : boolean
    + isValidQuorumProposer(quorumMessage : QuorumMessage) : boolean
    + isValidRoundChangeQuorumProposer(quorumMessage : QuorumMessage) : boolean
    + partialBlockFilled(inPartialblock : PartialBlock) : boolean
    + setChain(chain : NavigableMap<Integer, Block>)
    + setEphemeralChain(ephemeralchain : NavigableMap<Integer, Block>)
    + setFinalEpochCounter(newFinalEpochCounter : int)
    + setFinalSubEpochCounter(newFinalSubEpochCounter : int)
    + setNonValidators(nonValidators : CopyOnWriteArrayList<String>)
    + setPartialblockProposeCounter(newPartialblockProposeCounter : int)
    + setRoundCounter(newRoundCounter : int)
    + setValidators(validators : CopyOnWriteArrayList<String>)
    + updatefinalisedEphemeralBlock(block : Block)
  }
  class HashingState {
    ~ hash : String
    ~ hasher : int
    ~ hashtime : Timestamp
    ~ partialBlockState : List<Integer>
    + HashingState(inHashTime : Timestamp, inHash : String, inHasher : int, partialBlockState : List<Integer>)
    + getBlockTime() : Timestamp
    + getHash() : String
    + getHasher() : int
    + getPartialBlockState() : List<Integer>
    + setBlockTime(inHashtime : Timestamp)
    + setHash(inHash : String)
    + setHasher(inHasher : int)
    + setPartialBlockState(inPartialBlockState : List<Integer>)
  }
  class PartialBlock {
    ~ QuorumId : int
    ~ blockHeight : int
    ~ blocktime : Timestamp
    ~ commitMessageValidators : CopyOnWriteArrayList<String>
    ~ commitMessageValidatorsIndexes : CopyOnWriteArrayList<Integer>
    + finalised : boolean
    ~ hash : String
    ~ majorblocknumber : int
    ~ minorblocknumber : int
    ~ originalProposernodeindex : int
    ~ originalRivalProposernodeindex : int
    ~ previoushash : String
    ~ proposalType : String
    ~ proposeCalculatedatindex : int
    ~ proposer : String
    ~ proposernodeindex : int
    ~ rivalproposerindex : int
    ~ signature : String
    ~ subepoch : int
    ~ transactions : CopyOnWriteArrayList<Transaction>
    ~ validity : boolean
    + PartialBlock()
    + PartialBlock(timestamp : Timestamp, previoushash : String, currentblockhash : String, data : CopyOnWriteArrayList<Transaction>, partialblockproposer : String, signature : String, majorblocknum : int, minorblocknum : int, proposernodeindex : int, blockHeight : int, rivalproposerindex : int, proposeCalculatedatindex : int, subEpoch : int, originalProposernodeindex : int, originalRivalProposernodeindex : int, quorumId : int, proposalType : String)
    + PartialBlock(timestamp : Timestamp, previoushash : String, currentblockhash : String, data : CopyOnWriteArrayList<Transaction>, partialblockproposer : String, signature : String, majorblocknum : int, minorblocknum : int, proposernodeindex : int, blockHeight : int, rivalproposerindex : int, proposeCalculatedatindex : int, subEpoch : int, originalProposernodeindex : int, originalRivalProposernodeindex : int, quorumId : int, proposalType : String, validity : boolean)
    + createPartialBlock(lastHash : String, data : CopyOnWriteArrayList<Transaction>, wallet : Wallet, majorblocknum : int, minorblocknum : int, blockProposernodeIndex : int, blockHeight : int, inRivalProposernodeindex : int, proposeCalculatedatindex : int, subEpoch : int, originalProposerIndex : int, originalRivalProposerIndex : int, quorumId : int, inProposalType : String) : PartialBlock {static}
    + generatePartialBlockHash(lastHash : String, transactions : List<Transaction>, proposer : String, majorblocknum : int, minorblocknum : int) : String {static}
    + generatePartialBlockHash(partialBlock : PartialBlock) : String {static}
    + getBlockData() : CopyOnWriteArrayList<Transaction>
    + getBlockHeight() : int
    + getBlockSignature() : String
    + getBlockTimestamp() : Timestamp
    + getBlocktime() : Timestamp
    + getCommitMessageValidatorIndexes() : CopyOnWriteArrayList<Integer>
    + getCommitMessageValidators() : CopyOnWriteArrayList<String>
    + getCommitMessageValidatorsIndexes() : CopyOnWriteArrayList<Integer>
    + getFinalised() : boolean
    + getHash() : String
    + getMajorBlocknumber() : int
    + getMajorblocknumber() : int
    + getMinorBlocknumber() : int
    + getMinorblocknumber() : int
    + getOriginalProposerNodeIndex() : int
    + getOriginalProposernodeindex() : int
    + getOriginalRivalProposerIndex() : int
    + getOriginalRivalProposernodeindex() : int
    + getPartialBlockDetails() : String
    + getPartialBlockHash() : String
    + getPartialBlocktime() : Timestamp
    + getPrevioushash() : String
    + getProposalType() : String
    + getProposeCalculatedatindex() : int
    + getProposer() : String
    + getProposerNodeIndex() : int
    + getProposernodeindex() : int
    + getQuorumId() : int
    + getRivalProposerIndex() : int
    + getRivalproposerindex() : int
    + getSignature() : String
    + getSubEpoch() : int
    + getSubepoch() : int
    + getTransactions() : CopyOnWriteArrayList<Transaction>
    + getValidity() : boolean
    + isFinalised() : boolean
    + isValidity() : boolean
    + setBlockHeight(blockHeight : int)
    + setBlocktime(blocktime : Timestamp)
    + setCommitMessageValidatorIndexes(commitMessageValidatorsIndexes : CopyOnWriteArrayList<Integer>)
    + setCommitMessageValidators(commitMessageValidators : CopyOnWriteArrayList<String>)
    + setCommitMessageValidatorsIndexes(commitMessageValidatorsIndexes : CopyOnWriteArrayList<Integer>)
    + setFinalised(finalised : boolean)
    + setHash(hash : String)
    + setMajorBlocknumber(majorBlockNumber : int)
    + setMajorblocknumber(majorblocknumber : int)
    + setMinorBlocknumber(minorBlockNumber : int)
    + setMinorblocknumber(minorblocknumber : int)
    + setOriginalProposerNodeIndex(originalProposernodeindex : int)
    + setOriginalProposernodeindex(originalProposernodeindex : int)
    + setOriginalRivalProposerIndex(originalRivalproposerindex : int)
    + setOriginalRivalProposernodeindex(originalRivalProposernodeindex : int)
    + setPartialBlockHash(hash : String)
    + setPartialBlocktime(blocktime : Timestamp)
    + setPrevioushash(previoushash : String)
    + setProposalType(inProposalType : String)
    + setProposeCalculatedatindex(proposeCalculatedatindex : int)
    + setProposer(proposer : String)
    + setProposerNodeIndex(proposernodeindex : int)
    + setProposernodeindex(proposernodeindex : int)
    + setQuorumId(inQuorumId : int)
    + setRivalProposerIndex(rivalproposerindex : int)
    + setRivalproposerindex(rivalproposerindex : int)
    + setSignature(signature : String)
    + setSubEpoch(subepoch : int)
    + setSubepoch(subepoch : int)
    + setTransactions(transactions : CopyOnWriteArrayList<Transaction>)
    + setValidity(validity : boolean)
    + signPartialBlockHash(partialBlockHash : String, wallet : Wallet) : String {static}
    + toString() : String
    + verifyPartialBlock(partialBlock : PartialBlock) : boolean {static}
    + verifyProposer(partialBlock : PartialBlock, proposer : String) : boolean {static}
  }
  class ProposerMessage {
    ~ chainKey : int
    ~ nodeIndex : int
    ~ ProposerMessage(inNodeIndex : int, inChainKey : int)
    + getChainIndex() : int
    + getNodeIndex() : int
    + setChainIndex(chainIndex : int)
    + setNodeIndex(nodeIndex : int)
  }
  class TransactionPool {
    + blockchain : Blockchain
    + confirmedTransactionIds : CopyOnWriteArrayList<String>
    + roundcounter : AtomicInteger
    + transactionRoundStatus : Map<Integer, Boolean>
    + transactionSizeKeeper : ConcurrentMap<Integer, AtomicInteger>
    + transactionStorage : Map<Integer, CopyOnWriteArrayList<Transaction>>
    + transactionThreshold : int
    + txcounter : AtomicInteger
    + TransactionPool()
    + addTransaction(transaction : Transaction) : boolean
    + addconfirmedTransactionId(id : String)
    + addconfirmedTransactionIds(ids : List<String>)
    + clearTransactionPool()
    + clearTransactionPoolFromIncomingBlock(roundno : int, intransactions : CopyOnWriteArrayList<Transaction>)
    + confirmedTransactionIdexists(id : String) : boolean
    + confirmedTransactionIdsexists(ids : List<String>) : boolean
    + getConfirmedTransactionIds() : List<String>
    + getTransactionRoundStatus() : Map<Integer, Boolean>
    + getTransactionThreshold() : int
    + getTransactions(roundno : int) : CopyOnWriteArrayList<Transaction>
    + setTransactionThreshold(transactionThreshold : int)
    + setTransactions(transactions : CopyOnWriteArrayList<Transaction>, roundno : int)
    + transactionExists(intransaction : Transaction, roundno : int) : boolean
    + verifyTransaction(transaction : Transaction) : boolean
  }
}
Simulator_service -->  "-utilitarianScoreStorage" UtilitarianScoreStorage
Simulator_service -->  "-p2pServer" P2PServer
Blockchain -->  "-nonValidator" NonValidator
Simulator_controller -->  "-blockPool" BlockPool
Simulator_controller -->  "-nonValidator" NonValidator
P2PServer -->  "-queueResource" QueueResource
TransactionPool -->  "-blockchain" Blockchain
FinaliseMessage -->  "-partialBlock" PartialBlock
BlockPool -->  "-blocks" Block
CAPSEOBFTDemMessagePool -->  "-quorumStorage" QuorumStorage
UtilitarianCalculator -->  "-utilitarianScoreStorage" UtilitarianScoreStorage
Simulator_controller -->  "-transactionPool" TransactionPool
PartialBlock -->  "-transactions" Transaction
P2PServer -->  "-capSEOBFTDemMessagePool" CAPSEOBFTDemMessagePool
Simulator_controller -->  "-utilitarianCalculator" UtilitarianCalculator
Simulator_controller -->  "-quorumStorage" QuorumStorage
Simulator_controller -->  "-queueResource" QueueResource
UtilitarianCalculator -->  "-quorumStorage" QuorumStorage
Simulator_controller -->  "-simulator_result" Simulator_result
UtilitarianCalculator -->  "-blockchain" Blockchain
Simulator_controller -->  "-privacyStorage" PrivacyStorage
Simulator_service -->  "-quorumStorage" QuorumStorage
Simulator_service -->  "-wallet" Wallet
Simulator_service -->  "-simulator_result" Simulator_result
Simulator_controller -->  "-validator" Validator
Simulator_controller -->  "-synchronizer" Synchronizer
P2PServer -->  "-nonValidator" NonValidator
Simulator_service -->  "-blockchain" Blockchain
Simulator_controller -->  "-capSEOBFTDemMessagePool" CAPSEOBFTDemMessagePool
P2PServer -->  "-validator" Validator
Blockchain -->  "-validator" Validator
Simulator_controller -->  "-blockchain" Blockchain
Simulator_controller -->  "-utilitarianScoreStorage" UtilitarianScoreStorage
P2PServer -->  "-transactionPool" TransactionPool
Simulator_controller -->  "-p2pserver" P2PServer
P2PServer -->  "-wallet" Wallet
P2PServer -->  "-blockPool" BlockPool
BlockMessage -->  "-block" Block
Simulator_controller -->  "-wallet" Wallet
UtilitarianCalculator -->  "-wallet" Wallet
UtilitarianCalculator -->  "-heartBeatStorage" HeartBeatStorage
Simulator_controller -->  "-heartBeatStorage" HeartBeatStorage
Simulator_controller -->  "-simulator_service" Simulator_service
Blockchain -->  "-quorumStorage" QuorumStorage
P2PServer -->  "-blockchain" Blockchain
CAPSEOBFTDemMessagePool -->  "-utilitarianCalculator" UtilitarianCalculator
Simulator_service -->  "-heartBeatStorage" HeartBeatStorage
@enduml